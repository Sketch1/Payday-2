/*
 * Copyright 2015 Galen Hite. Reproduce at your peril.
 */
package paydaygame;

/*This is the Interface class, which acts as the controller for all of the other
classes. It contains the main method, and the run method, which starts the 
game when the go button is pressed. */

import java.util.Random;

public class Interface extends javax.swing.JFrame implements Runnable {
    
    Mail toMail;
    Player toPlayer[];
    Board toBoard;
    Deal toDeal;
    Interface interface1;
    StatWindow toStatWindow;
    GameUI toGameUI;
    UIThread toUIThread;
    Thread toUIThreadsThread;
    int index = 0;
    int jackpot;
    int noOfPlayers;
    int noOfMonths;
    int nextPlayer = 0;
    boolean devMode;
    boolean finished = true;
    boolean ready = false;
    String lockObj;
    
    public Interface(String l, UIThread u, Thread t) {
        lockObj = l;
        toUIThread = u;
        toUIThreadsThread = t;
        }
    
    @Override
    public void run() {
        initComponents();
        this.setVisible(true);
        toUIThread.setToInterface(this);
    }
    
    public void startGame() { /*This is the method which is called by goButtonActionPerformed.
        It calls for the consturction of the Deal and Mail decks, along with the
        Board and StatWindow. It also contructs the Players, one after another,
        using a for loop to determine how many are to be created. Finally, it 
        runs the game, calling takeYourTurn in player.*/
        devMode = false;
        toDeal = new Deal(this);
        toMail = new Mail(this);
        toBoard = new Board();
        toStatWindow = new StatWindow(noOfPlayers, noOfMonths);
        System.out.println("Setting up the game..."); 
        toPlayer = new Player[noOfPlayers];
        for (int index = 0; index < noOfPlayers; index++) {
            toPlayer[index] = new Player(this, toBoard, index, toMail, toDeal);
            }        
        toGameUI = new GameUI(noOfPlayers, this, toDeal, toMail, toBoard);
        for (int index = 0; index < noOfPlayers; index++) {
            toPlayer[index].setGameUI(toGameUI);
            }
        toDeal.updateCards(this);
        toMail.updateCards(this);
        toUIThread.setToGameUI(toGameUI);
        finished = false;
        toUIThreadsThread.start();
        toGameUI.distributeStartingMoney();
        this.passString("Setting up the game");
        index++; 
        jackpot = 0;
        ready = true;
        while (!finished) {
            for (int index = 0; index < noOfPlayers; index++) {
                if(!toPlayer[index].finished) {toPlayer[index].takeYourTurn();}}
            }
    }

    /*Much (all) of the following code was generated by NetBeans as part of the 
    GUI I designed. It is uneditable, and this is a real pain. When we start
    working on the true GUI for this game, we will copy the important methods
    out of this class, place them elsewhere, and start fresh.*/
    
    /*The initComponets method constructs the GUI we have now, using the requsite
    JComponets.*/
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jFrame1 = new javax.swing.JFrame();
        lable1 = new javax.swing.JLabel();
        noOfPlayersField = new javax.swing.JTextField();
        noOfMonthsField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        infoTable = new javax.swing.JTable();
        goButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lable1.setText("Payday");

        noOfPlayersField.setText("6");
        noOfPlayersField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noOfPlayersFieldActionPerformed(evt);
            }
        });

        noOfMonthsField.setText("4");
        noOfMonthsField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noOfMonthsFieldActionPerformed(evt);
            }
        });

        infoTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Player 0", "Player 1", "Player 2", "Player 3"
            }
        ));
        jScrollPane1.setViewportView(infoTable);

        goButton.setText("GO!");
        goButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("No. Of Players");

        jLabel2.setText("No. Of Months");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(noOfPlayersField, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(noOfMonthsField, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(19, 19, 19))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(83, 83, 83)
                        .addComponent(goButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(91, 91, 91)
                        .addComponent(lable1)))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(lable1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(noOfPlayersField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(noOfMonthsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(goButton))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /*This method is an undeletable method generated by NetBeans. It is supposed
    to trigger when something is typed into the Number Of Months field. It is currently
    empty, as I can get everything I need from these fields with Integer.parseInt(String);*/
    private void noOfMonthsFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noOfMonthsFieldActionPerformed
        
    }//GEN-LAST:event_noOfMonthsFieldActionPerformed

    private void goButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goButtonActionPerformed
        /*When the player presses go, this method activates, and the game starts.
        It sets up the number of Players and months, and runs run.*/
        String noOfMonthsString = noOfMonthsField.getText();
        String noOfPlayersString = noOfPlayersField.getText();
        noOfMonths = Integer.parseInt(noOfMonthsString);
        noOfPlayers = Integer.parseInt(noOfPlayersString);
        if (index > 0) {toStatWindow.close(); }
        System.out.println("The game is starting!");
        startGame();
    }//GEN-LAST:event_goButtonActionPerformed

    private void noOfPlayersFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noOfPlayersFieldActionPerformed
       
    }//GEN-LAST:event_noOfPlayersFieldActionPerformed

    /*public static void kick() { 
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
            new Interface().setVisible(true);
            }
        });
    }*/
    
    public Player getOtherPlayer(int i) { /*This method returns a random Player 
        from those playing. If passed -1, it will return any Player.*/
        int n = i;
        while (n == i) {n = new Random().nextInt(noOfPlayers);}
        return toPlayer[n];
    }
    
    public void areWeDone() { /*This method will check, whenever a Player reaches Payday
        and finishes, whether that was the last Player to finish. If it was, it
        starts the sequince of choosing the winner, and printing out statistics
        (which it doesn't do yet).*/
        this.passString("Checking to see if all players are finished...");
        for (int index = 0; index < noOfPlayers; index++) {
            if (!toPlayer[index].getFinished()) {
                return;
            }
        }
        finished = true;
        this.passString("The game has ended!");
        int highestCash = -50000000;
        int mostWealthyPlayer = -1;
        for (int index = 0; index < noOfPlayers; index++) {
            int h = toPlayer[index].getCash();
            if (h > highestCash) {highestCash = h; mostWealthyPlayer = index;}                        
        }
        this.passString("The Winner Was Player " + mostWealthyPlayer + " with $" + highestCash);
        return;
        //TODO The reporting of stats and the showing of awesome crap
    }
    
    public void allPayersPlay(int i, boolean bank, int payee) { /*This method causes all Players to pay a
        passed amount.*/
        for (int index = 0; index < noOfPlayers; index++) {
            toPlayer[index].decreaseBalance(-i, bank, payee, index);}
    }
    
    public void printCash(int cash, int callingPlayerMonth, int callingPlayer) {
        /*This method prints out a Player's current cash into the stats window.*/
        toStatWindow.setValueAt("$"+cash, callingPlayerMonth, callingPlayer);
    }
    
    public Player getPlayer(int ID) {
        if (devMode) {this.passString("getPlayer called with ID " + ID);}
        return toPlayer[ID];
    }
    
    public void passString(String s) {
        toGameUI.setCurrentOutput(s);
    }
    
    public void nextPlayerTurn() {
        if(!toPlayer[nextPlayer].finished) {toPlayer[nextPlayer].takeYourTurn();}
        nextPlayer++;
        if (nextPlayer >= noOfPlayers) {nextPlayer = 0;}
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton goButton;
    private javax.swing.JTable infoTable;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lable1;
    private javax.swing.JTextField noOfMonthsField;
    private javax.swing.JTextField noOfPlayersField;
    // End of variables declaration//GEN-END:variables
}
